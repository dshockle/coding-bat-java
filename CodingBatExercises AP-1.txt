CODING.BAT EXERCISES

Java

AP-1

1. scoresIncreasing 

Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more. 

scoresIncreasing({1, 3, 4}) → true
scoresIncreasing({1, 3, 2}) → false
scoresIncreasing({1, 1, 4}) → true

public boolean scoresIncreasing(int[] scores)

  for(int i = 1; i < scores.length; i++)
    if (scores[i] < scores[i-1])
      return false;
      
  return true;

Expected	Run		
scoresIncreasing({1, 3, 4}) → true	true	OK	    
scoresIncreasing({1, 3, 2}) → false	false	OK	    
scoresIncreasing({1, 1, 4}) → true	true	OK	    
scoresIncreasing({1, 1, 2, 4, 4, 7}) → true	true	OK	    
scoresIncreasing({1, 1, 2, 4, 3, 7}) → false	false	OK	    
scoresIncreasing({-5, 4, 11}) → true	true	OK	   

2. scores100 

Given an array of scores, return true if there are scores of 100 next to each other in the array. The array length will be at least 2. 

scores100({1, 100, 100}) → true
scores100({1, 100, 99, 100}) → false
scores100({100, 1, 100, 100}) → true

public boolean scores100(int[] scores)

  for(int i = 1; i < scores.length; i++)
    if(scores[i] == 100 && scores[i-1] == 100)
      return true;
      
  return false;

xpected	Run		
scores100({1, 100, 100}) → true	true	OK	    
scores100({1, 100, 99, 100}) → false	false	OK	    
scores100({100, 1, 100, 100}) → true	true	OK	    
scores100({100, 1, 100, 1}) → false	false	OK	    
scores100({1, 2, 3, 4, 5}) → false	false	OK	   

3. scoresClump 

Given an array of scores sorted in increasing order, return true if the array contains 3 adjacent scores that differ from each other by at most 2, such as with {3, 4, 5} or {3, 5, 5}. 

scoresClump({3, 4, 5}) → true
scoresClump({3, 4, 6}) → false
scoresClump({1, 3, 5, 5}) → true

public boolean scoresClump(int[] scores)

  for(int i = 1; i < scores.length-1; i++){
      if (scores[i]-scores[i-1] <= 2 && 
          scores[i+1]-scores[i] <= 2 &&
          scores[i+1]-scores[i-1] <= 2)
        return true;      
  }
  return false;

Expected	Run		
scoresClump({3, 4, 5}) → true	true	OK	    
scoresClump({3, 4, 6}) → false	false	OK	    
scoresClump({1, 3, 5, 5}) → true	true	OK	    
scoresClump({2, 4, 5, 6}) → true	true	OK	    
scoresClump({2, 4, 5, 7}) → false	false	OK	    
scoresClump({2, 4, 4, 7}) → true	true	OK	    
scoresClump({3, 3, 6, 7, 9}) → false	false	OK	    
scoresClump({3, 3, 7, 7, 9}) → true	true	OK	    
scoresClump({4, 5, 8}) → false	false	OK	  

4. scoresAverage 

Given an array of scores, compute the int average of the first half and the second half, and return whichever is larger. We'll say that the second half begins at index length/2. The array length will be at least 2. To practice decomposition, write a separate helper method <br>int average(int[] scores, int start, int end) { which computes the average of the elements between indexes start..end. Call your helper method twice to implement scoresAverage(). Write your helper method after your scoresAverage() method in the JavaBat text area. Normally you would compute averages with doubles, but here we use ints so the expected results are exact. 

scoresAverage({2, 2, 4, 4}) → 4
scoresAverage({4, 4, 4, 2, 2, 2}) → 4
scoresAverage({3, 4, 5, 1, 2, 3}) → 4

public int scoresAverage(int[] scores)

  int left = average(scores, 0, scores.length/2);
  int right = average(scores, scores.length/2, scores.length);
  return Math.max(left, right);
}

int average(int[] scores, int start, int end){
  int sum = 0;
  for(int i = start; i < end; i++)
    sum += scores[i];
    
  return sum/(end-start);
}

Expected	Run		
scoresAverage({2, 2, 4, 4}) → 4	4	OK	    
scoresAverage({4, 4, 4, 2, 2, 2}) → 4	4	OK	    
scoresAverage({3, 4, 5, 1, 2, 3}) → 4	4	OK	    
scoresAverage({5, 6}) → 6	6	OK	   

5. wordsCount 

Given an array of strings, return the count of the number of strings with the given length.

wordsCount({"a", "bb", "b", "ccc"}, 1) → 2
wordsCount({"a", "bb", "b", "ccc"}, 3) → 1
wordsCount({"a", "bb", "b", "ccc"}, 4) → 0

public int wordsCount(String[] words, int len)

  int count = 0;
  
  for(String w : words)
    if (w.length() == len)
      count++;
      
  return count;

Expected	Run		
wordsCount({"a", "bb", "b", "ccc"}, 1) → 2	2	OK	    
wordsCount({"a", "bb", "b", "ccc"}, 3) → 1	1	OK	    
wordsCount({"a", "bb", "b", "ccc"}, 4) → 0	0	OK	    
wordsCount({"xx", "yyy", "x", "yy", "z"}, 1) → 2	2	OK	   

6. wordsFront 

Given an array of strings, return a new array containing the first N strings. N will be in the range 1..length. 

wordsFront({"a", "b", "c", "d"}, 1) → {"a"}
wordsFront({"a", "b", "c", "d"}, 2) → {"a", "b"}
wordsFront({"a", "b", "c", "d"}, 3) → {"a", "b", "c"}

public String[] wordsFront(String[] words, int n)

  String[] result = new String[n];
  
  for(int i = 0; i < n; i++)
    result[i] = words[i];
    
  return result;

Expected	Run		
wordsFront({"a", "b", "c", "d"}, 1) → {"a"}	{"a"}	OK	    
wordsFront({"a", "b", "c", "d"}, 2) → {"a", "b"}	{"a", "b"}	OK	    
wordsFront({"a", "b", "c", "d"}, 3) → {"a", "b", "c"}	{"a", "b", "c"}	OK	    
wordsFront({"a", "b", "c", "d"}, 4) → {"a", "b", "c", "d"}	{"a", "b", "c", "d"}	OK	    
wordsFront({"Hi", "There"}, 1) → {"Hi"}	{"Hi"}	OK	

7. wordsWithoutList

Given an array of strings, return a new List (e.g. an ArrayList) where all the strings of the given length are omitted. See wordsWithout() below which is more difficult because it uses arrays. 

wordsWithoutList({"a", "bb", "b", "ccc"}, 1) → {"bb", "ccc"}
wordsWithoutList({"a", "bb", "b", "ccc"}, 3) → {"a", "bb", "b"}
wordsWithoutList({"a", "bb", "b", "ccc"}, 4) → {"a", "bb", "b", "ccc"}

public List wordsWithoutList(String[] words, int len)

  List<String> result = new ArrayList<String>();
  
  for(String w : words)
    if (w.length() != len)
      result.add(w);
      
  return result;

Expected	Run		
wordsWithoutList({"a", "bb", "b", "ccc"}, 1) → {"bb", "ccc"}	{"bb", "ccc"}	OK	    
wordsWithoutList({"a", "bb", "b", "ccc"}, 3) → {"a", "bb", "b"}	{"a", "bb", "b"}	OK	    
wordsWithoutList({"a", "bb", "b", "ccc"}, 4) → {"a", "bb", "b", "ccc"}	{"a", "bb", "b", "ccc"}	OK	  

8. hasOne

Given a positive int n, return true if it contains a 1 digit.

hasOne(10) → true
hasOne(22) → false
hasOne(220) → false

public boolean hasOne(int n)

  while (n > 0){
    int digit = n % 10;
    if (digit == 1)
      return true;
    n = n / 10;
  }
  return false;

Expected	Run		
hasOne(10) → true	true	OK	    
hasOne(22) → false	false	OK	    
hasOne(220) → false	false	OK	    
hasOne(212) → true	true	OK	    
hasOne(1) → true	true	OK	    
hasOne(9) → false	false	OK	    
hasOne(211112) → true	true	OK	    
hasOne(121121) → true	true	OK	  

9. dividesSelf 

We'll say that a positive int divides itself if every digit in the number divides into the number evenly. So for example 128 divides itself since 1, 2, and 8 all divide into 128 evenly. We'll say that 0 does not divide into anything evenly, so no number with a 0 digit divides itself.

dividesSelf(128) → true
dividesSelf(12) → true
dividesSelf(120) → false

public boolean dividesSelf(int n)

  int num = n;
  while (num > 0){
    int digit = num % 10;
    if (digit == 0)
      return false;
    else if (n % digit != 0)
      return false;
    num = num / 10;
  }
  return true;

Expected	Run		
dividesSelf(128) → true	true	OK	    
dividesSelf(12) → true	true	OK	    
dividesSelf(120) → false	false	OK	    
dividesSelf(122) → true	true	OK	    
dividesSelf(13) → false	false	OK	    

10. copyEvens 

Given an array of positive ints, return a new array of length "count" containing the first even numbers from the original array. The original array will contain at least "count" even numbers. 

copyEvens({3, 2, 4, 5, 8}, 2) → {2, 4}
copyEvens({3, 2, 4, 5, 8}, 3) → {2, 4, 8}
copyEvens({6, 1, 2, 4, 5, 8}, 3) → {6, 2, 4}

public int[] copyEvens(int[] nums, int count)

 int[] evens = new int[count];
  int pos = 0;
  
  for(int i = 0; i < nums.length; i++){
    if (pos >= count)
      break;
    if (nums[i] % 2 == 0)
      evens[pos++] = nums[i];
  }
  return evens;
}

Expected	Run		
copyEvens({3, 2, 4, 5, 8}, 2) → {2, 4}	{2, 4}	OK	    
copyEvens({3, 2, 4, 5, 8}, 3) → {2, 4, 8}	{2, 4, 8}	OK	    
copyEvens({6, 1, 2, 4, 5, 8}, 3) → {6, 2, 4}	{6, 2, 4}	OK	    
copyEvens({6, 1, 2, 4, 5, 8}, 4) → {6, 2, 4, 8}	{6, 2, 4, 8}	OK	    
copyEvens({3, 1, 4, 1, 5}, 1) → {4}	{4}	OK	    
copyEvens({2}, 1) → {2}	{2}	OK	   

11. copyEndy

We'll say that a positive int n is "endy" if it is in the range 0..10 or 90..100 (inclusive). Given an array of positive ints, return a new array of length "count" containing the first endy numbers from the original array. Decompose out a separate isEndy(int n) method to test if a number is endy. The original array will contain at least "count" endy numbers. 

copyEndy({9, 11, 90, 22, 6}, 2) → {9, 90}
copyEndy({9, 11, 90, 22, 6}, 3) → {9, 90, 6}
copyEndy({12, 1, 1, 13, 0, 20}, 2) → {1, 1}

public int[] copyEndy(int[] nums, int count)

  int[] result = new int[count];
  int pos = 0;
  
  for(int i = 0; i < nums.length; i++){
    if (pos >= count)
      break;
    if (isEndy(nums[i]))
      result[pos++] = nums[i];
    }
    return result;
}

boolean isEndy(int n){
  return (n >= 0 && n <= 10) || (n >= 90 && n <= 100);
}

Expected	Run		
copyEndy({9, 11, 90, 22, 6}, 2) → {9, 90}	{9, 90}	OK	    
copyEndy({9, 11, 90, 22, 6}, 3) → {9, 90, 6}	{9, 90, 6}	OK	    
copyEndy({12, 1, 1, 13, 0, 20}, 2) → {1, 1}	{1, 1}	OK	    
copyEndy({12, 1, 1, 13, 0, 20}, 3) → {1, 1, 0}	{1, 1, 0}	OK	    
copyEndy({0}, 1) → {0}	{0}	OK	    
copyEndy({10, 11, 90}, 2) → {10, 90}	{10, 90}	OK	    
copyEndy({90, 22, 100}, 2) → {90, 100}	{90, 100}	OK	    
copyEndy({12, 11, 10, 89, 101, 4}, 1) → {10}	{10}	OK	    
copyEndy({13, 2, 2, 0}, 2) → {2, 2}	{2, 2}	OK	 

12. matchUp 

Given 2 arrays that are the same length containing strings, compare the 1st string in one array to the 1st string in the other array, the 2nd to the 2nd and so on. Count the number of times that the 2 strings are non-empty and start with the same char. The strings may be any length, including 0. 

matchUp({"aa", "bb", "cc"}, {"aaa", "xx", "bb"}) → 1
matchUp({"aa", "bb", "cc"}, {"aaa", "b", "bb"}) → 2
matchUp({"aa", "bb", "cc"}, {"", "", "ccc"}) → 1

  int count = 0;
  
  for(int i = 0; i < a.length; i++)
    if (a[i].length() > 0 && b[i].length() > 0)
      if (a[i].charAt(0) == b[i].charAt(0))
        count++;
        
  return count;

Expected	Run		
matchUp({"aa", "bb", "cc"}, {"aaa", "xx", "bb"}) → 1	1	OK	    
matchUp({"aa", "bb", "cc"}, {"aaa", "b", "bb"}) → 2	2	OK	    
matchUp({"aa", "bb", "cc"}, {"", "", "ccc"}) → 1	1	OK	    
matchUp({"", "", "ccc"}, {"aa", "bb", "cc"}) → 1	1	OK	    
matchUp({"", "", ""}, {"", "bb", "cc"}) → 0	0	OK	    
matchUp({"aa", "bb", "cc"}, {"", "", ""}) → 0	0	OK	    
matchUp({"aa", "", "ccc"}, {"", "bb", "cc"}) → 1	1	OK	  

13. scoreUp 

The "key" array is an array containing the correct answers to an exam, like {"a", "a", "b", "b"}. the "answers" array contains a student's answers, with "?" representing a question left blank. The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer. 

scoreUp({"a", "a", "b", "b"}, {"a", "c", "b", "c"}) → 6
scoreUp({"a", "a", "b", "b"}, {"a", "a", "b", "c"}) → 11
scoreUp({"a", "a", "b", "b"}, {"a", "a", "b", "b"}) → 16

public int scoreUp(String[] key, String[] answers)

  int score = 0;
  
  for(int i = 0; i < answers.length; i++)
    if (!answers[i].equals("?"))
      if (answers[i].equals(key[i]))
        score += 4;
      else
        score -= 1;
        
   return score;

Expected	Run		
scoreUp({"a", "a", "b", "b"}, {"a", "c", "b", "c"}) → 6	6	OK	    
scoreUp({"a", "a", "b", "b"}, {"a", "a", "b", "c"}) → 11	11	OK	    
scoreUp({"a", "a", "b", "b"}, {"a", "a", "b", "b"}) → 16	16	OK	    
scoreUp({"a", "a", "b", "b"}, {"?", "c", "b", "?"}) → 3	3	OK	    
scoreUp({"a", "a", "b", "b"}, {"?", "c", "?", "?"}) → -1	-1	OK	 

14. wordsWithout 

Given an array of strings, return a new array without the strings that are equal to the target string.

wordsWithout({"a", "b", "c", "a"}, "a") → {"b", "c"}
wordsWithout({"a", "b", "c", "a"}, "b") → {"a", "c", "a"}
wordsWithout({"a", "b", "c", "a"}, "c") → {"a", "b", "a"}

public String[] wordsWithout(String[] words, String target)

  int count = 0;
  
  for(String w : words)
    if (!w.equals(target))
      count++;
      
  String[] result = new String[count];
  int pos = 0;
  
  for(String w : words)
    if (!w.equals(target))
      result[pos++] = w;
  
  return result;

Expected	Run		
wordsWithout({"a", "b", "c", "a"}, "a") → {"b", "c"}	{"b", "c"}	OK	    
wordsWithout({"a", "b", "c", "a"}, "b") → {"a", "c", "a"}	{"a", "c", "a"}	OK	    
wordsWithout({"a", "b", "c", "a"}, "c") → {"a", "b", "a"}	{"a", "b", "a"}	OK	    
wordsWithout({"b", "c", "a", "a"}, "b") → {"c", "a", "a"}	{"c", "a", "a"}	OK	   

15. scoresSpecial 

Given two arrays, A and B, of non-negative int scores. A "special" score is one which is a multiple of 10, such as 40 or 90. Return the sum of largest special score in A and the largest special score in B. To practice decomposition, write a separate helper method which finds the largest special score in an array. Write your helper method after your scoresSpecial() method in the JavaBat text area. 

scoresSpecial({12, 10, 4}, {2, 20, 30}) → 40
scoresSpecial({20, 10, 4}, {2, 20, 10}) → 40
scoresSpecial({12, 11, 4}, {2, 20, 31}) → 20

public int scoresSpecial(int[] a, int[] b)

  return special(a) + special(b);
}

int special(int[] arr){
  int max = 0;
  
  for(int n : arr)
    if (n % 10 == 0 && n > max)
      max = n;
  
  return max;

Expected	Run		
scoresSpecial({12, 10, 4}, {2, 20, 30}) → 40	40	OK	    
scoresSpecial({20, 10, 4}, {2, 20, 10}) → 40	40	OK	    
scoresSpecial({12, 11, 4}, {2, 20, 31}) → 20	20	OK	    
scoresSpecial({1, 20, 2, 50}, {3, 4, 5}) → 50	50	OK	    
scoresSpecial({3, 4, 5}, {1, 50, 2, 20}) → 50	50	OK	    
scoresSpecial({10, 4, 20, 30}, {20}) → 50	50	OK	   

16. sumHeights 

We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the sum of the changes for a walk beginning at the start index and ending at the end index. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1 + 5 = 6. The start end end index will both be valid indexes into the array with start <= end. 

sumHeights({5, 3, 6, 7, 2}, 2, 4) → 6
sumHeights({5, 3, 6, 7, 2}, 0, 1) → 2
sumHeights({5, 3, 6, 7, 2}, 0, 4) → 11

public int sumHeights(int[] heights, int start, int end)

  int sum = 0;
  
  for(int i = start+1; i < end+1; i++)
    sum += Math.abs(heights[i]-heights[i-1]);
    
  return sum;

Expected	Run		
sumHeights({5, 3, 6, 7, 2}, 2, 4) → 6	6	OK	    
sumHeights({5, 3, 6, 7, 2}, 0, 1) → 2	2	OK	    
sumHeights({5, 3, 6, 7, 2}, 0, 4) → 11	11	OK	    
sumHeights({5, 3, 6, 7, 2}, 1, 1) → 0	0	OK	    
sumHeights({1, 2, 3, 4, 5, 4, 3, 2, 10}, 0, 3) → 3	3	OK	    
sumHeights({1, 2, 3, 4, 5, 4, 3, 2, 10}, 4, 8) → 11	11	OK	

17. sumHeights2 

We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the sum of the changes for a walk beginning at the start index and ending at the end index, however increases in height count double. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1*2 + 5 = 7. The start end end index will both be valid indexes into the array with start <= end. 

sumHeights2({5, 3, 6, 7, 2}, 2, 4) → 7
sumHeights2({5, 3, 6, 7, 2}, 0, 1) → 2
sumHeights2({5, 3, 6, 7, 2}, 0, 4) → 15

public int sumHeights2(int[] heights, int start, int end)

  int sum = 0;
  
  for(int i = start+1; i < end+1; i++)
    if (heights[i] > heights[i-1])
      sum += 2 * (heights[i]-heights[i-1]);
    else
      sum += (heights[i-1]-heights[i]);
    
  return sum;

18. bigHeights 

We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the number of "big" steps for a walk starting at the start index and ending at the end index. We'll say that step is big if it is 5 or more up or down. The start end end index will both be valid indexes into the array with start <= end. 

bigHeights({5, 3, 6, 7, 2}, 2, 4) → 1
bigHeights({5, 3, 6, 7, 2}, 0, 1) → 0
bigHeights({5, 3, 6, 7, 2}, 0, 4) → 1

public int bigHeights(int[] heights, int start, int end)

  int count = 0;
  for(int i = start + 1; i < end + 1; i++)
    if (Math.abs(heights[i]-heights[i-1])>=5)
      count++;
  return count;

Expected	Run		
bigHeights({5, 3, 6, 7, 2}, 2, 4) → 1	1	OK	    
bigHeights({5, 3, 6, 7, 2}, 0, 1) → 0	0	OK	    
bigHeights({5, 3, 6, 7, 2}, 0, 4) → 1	1	OK	    
bigHeights({5, 3, 6, 7, 3}, 0, 4) → 0	0	OK	    
bigHeights({5, 3, 6, 7, 2}, 1, 1) → 0	0	OK	    
bigHeights({5, 13, 6, 7, 2}, 1, 2) → 1	1	OK	    
bigHeights({5, 13, 6, 7, 2}, 0, 2) → 2	2	OK	    

19. userCompare 

We have data for two users, A and B, each with a String name and an int id. The goal is to order the users such as for sorting. Return -1 if A comes before B, 1 if A comes after B, and 0 if they are the same. Order first by the string names, and then by the id numbers if the names are the same. 

userCompare("bb", 1, "zz", 2) → -1
userCompare("bb", 1, "aa", 2) → 1
userCompare("bb", 1, "bb", 1) → 0

public int userCompare(String aName, int aId, String bName, int bId) 

  if (aName.compareTo(bName) < 0)
    return -1;
  else if (aName.compareTo(bName) > 0)
    return 1;
  else if (aId < bId)
    return -1;
  else if (aId > bId)
    return 1;
  else
    return 0;

Expected	Run		
userCompare("bb", 1, "zz", 2) → -1	-1	OK	    
userCompare("bb", 1, "aa", 2) → 1	1	OK	    
userCompare("bb", 1, "bb", 1) → 0	0	OK	    
userCompare("bb", 5, "bb", 1) → 1	1	OK	    
userCompare("bb", 5, "bb", 10) → -1	-1	OK	    

20. mergeTwo 

Start with two arrays of strings, A and B, each with its elements in alphabetical order and without duplicates. Return a new array containing the first N elements from the two arrays. The result array should be in alphabetical order and without duplicates. A and B will both have a length which is N or more. The best "linear" solution makes a single pass over A and B, taking advantage of the fact that they are in alphabetical order, copying elements directly to the new array. 

mergeTwo({"a", "c", "z"}, {"b", "f", "z"}, 3) → {"a", "b", "c"}
mergeTwo({"a", "c", "z"}, {"c", "f", "z"}, 3) → {"a", "c", "f"}
mergeTwo({"f", "g", "z"}, {"c", "f", "g"}, 3) → {"c", "f", "g"}

public String[] mergeTwo(String[] a, String[] b, int n)

  String[] result = new String[n];
  int rpos = 0, apos = 0, bpos = 0;
  
  while (rpos < n){
    if (a[apos].compareTo(b[bpos]) < 0)
      result[rpos++] = a[apos++];
    else if (a[apos].compareTo(b[bpos]) > 0)
      result[rpos++] = b[bpos++];
    else{
      result[rpos++] = b[bpos++];
      if (apos < a.length - 1)
        apos++;
    }
  }
  
  return result;

Expected	Run		
mergeTwo({"a", "c", "z"}, {"b", "f", "z"}, 3) → {"a", "b", "c"}	{"a", "b", "c"}	OK	    
mergeTwo({"a", "c", "z"}, {"c", "f", "z"}, 3) → {"a", "c", "f"}	{"a", "c", "f"}	OK	    
mergeTwo({"f", "g", "z"}, {"c", "f", "g"}, 3) → {"c", "f", "g"}	{"c", "f", "g"}	OK	    
mergeTwo({"a", "c", "z"}, {"a", "c", "z"}, 3) → {"a", "c", "z"}	{"a", "c", "z"}	OK	    
mergeTwo({"a", "b", "c", "z"}, {"a", "c", "z"}, 3) → {"a", "b", "c"}	{"a", "b", "c"}	OK	    
mergeTwo({"a", "c", "z"}, {"a", "b", "c", "z"}, 3) → {"a", "b", "c"}	{"a", "b", "c"}	OK	  

21. commonTwo

Start with two arrays of strings, a and b, each in alphabetical order, possibly with duplicates. Return the count of the number of strings which appear in both arrays. The best "linear" solution makes a single pass over both arrays, taking advantage of the fact that they are in alphabetical order. 

commonTwo({"a", "c", "x"}, {"b", "c", "d", "x"}) → 2
commonTwo({"a", "c", "x"}, {"a", "b", "c", "x", "z"}) → 3
commonTwo({"a", "b", "c"}, {"a", "b", "c"}) → 3

public int commonTwo(String[] a, String[] b)

  int count = 0, apos = 0, bpos = 0;
  
  while(apos < a.length && bpos < b.length){
    if (a[apos].compareTo(b[bpos]) == 0){
      count++;
      apos = updatePosition(a, apos);     
      bpos = updatePosition(b, bpos);
    }  
    else if (a[apos].compareTo(b[bpos]) < 0)
      apos = updatePosition(a, apos);     
    else
      bpos = updatePosition(b, bpos);
  }
  return count;
}

int updatePosition(String[] arr, int pos){
  do{
    pos++;
  } while(pos < arr.length-1 && arr[pos] == arr[pos+1]);
  return pos;
}

Expected	Run		
commonTwo({"a", "c", "x"}, {"b", "c", "d", "x"}) → 2	2	OK	    
commonTwo({"a", "c", "x"}, {"a", "b", "c", "x", "z"}) → 3	3	OK	    
commonTwo({"a", "b", "c"}, {"a", "b", "c"}) → 3	3	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"a", "b", "c"}) → 3	3	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"a", "b", "b", "b", "c"}) → 3	3	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"a", "b", "b", "c", "c"}) → 3	3	OK	    
commonTwo({"b", "b", "b", "b", "c"}, {"a", "b", "b", "b", "c"}) → 2	2	OK	    
commonTwo({"a", "b", "c", "c", "d"}, {"a", "b", "b", "c", "d", "d"}) → 4	4	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"b", "b", "b"}) → 1	1	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"c", "c"}) → 1	1	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"b", "b", "b", "x"}) → 1	1	OK	    
commonTwo({"a", "a", "b", "b", "c"}, {"b", "b"}) → 1	1	OK	    
commonTwo({"a"}, {"a", "b"}) → 1	1	OK	    
commonTwo({"a"}, {"b"}) → 0	0	OK	    
commonTwo({"a", "a"}, {"b", "b"}) → 0	0	OK	    
commonTwo({"a", "b"}, {"a", "b"}) → 2	2	OK	   

