CODING.BAT EXERCISES

Java

Array-1

1. firstLast6 

Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more. 

firstLast6({1, 2, 6}) → true
firstLast6({6, 1, 2, 3}) → true
firstLast6({13, 6, 1, 2, 3}) → false

public boolean firstLast6(int[] nums) 

  return nums[0] == 6 || nums[nums.length-1] == 6;

Expected	Run		
firstLast6({1, 2, 6}) → true	true	OK	    
firstLast6({6, 1, 2, 3}) → true	true	OK	    
firstLast6({13, 6, 1, 2, 3}) → false	false	OK	    
firstLast6({13, 6, 1, 2, 6}) → true	true	OK	    
firstLast6({3, 2, 1}) → false	false	OK	    
firstLast6({3, 6, 1}) → false	false	OK	    
firstLast6({3, 6}) → true	true	OK	    
firstLast6({6}) → true	true	OK	    
firstLast6({3}) → false	false	OK	    
firstLast6({5, 6}) → true	true	OK	    
firstLast6({5, 5}) → false	false	OK	    
firstLast6({1, 2, 3, 4, 6}) → true	true	OK	    
firstLast6({1, 2, 3, 4}) → false	false	OK	    

2. sameFirstLast 

Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal. 

sameFirstLast({1, 2, 3}) → false
sameFirstLast({1, 2, 3, 1}) → true
sameFirstLast({1, 2, 1}) → true

public boolean sameFirstLast(int[] nums)

  return nums.length >= 1 && nums[0] == nums[nums.length-1];

Expected	Run		
sameFirstLast({1, 2, 3}) → false	false	OK	    
sameFirstLast({1, 2, 3, 1}) → true	true	OK	    
sameFirstLast({1, 2, 1}) → true	true	OK	    
sameFirstLast({7}) → true	true	OK	    
sameFirstLast({}) → false	false	OK	   

3. makePi 

Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}. 

makePi() → {3, 1, 4}

public int[] makePi() 

  int[] pi = {3,1,4};
  return pi;

Expected	Run		
makePi() → {3, 1, 4}	{3, 1, 4}	OK	   

4. commonEnd 

Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more. 

commonEnd({1, 2, 3}, {7, 3}) → true
commonEnd({1, 2, 3}, {7, 3, 2}) → false
commonEnd({1, 2, 3}, {1, 3}) → true

  return a[0]==b[0] || a[a.length-1] == b[b.length-1];

Expected	Run		
commonEnd({1, 2, 3}, {7, 3}) → true	true	OK	    
commonEnd({1, 2, 3}, {7, 3, 2}) → false	false	OK	    
commonEnd({1, 2, 3}, {1, 3}) → true	true	OK	    
commonEnd({1, 2, 3}, {1}) → true	true	OK	    
commonEnd({1, 2, 3}, {2}) → false	false	OK	    

5. sum3 

Given an array of ints length 3, return the sum of all the elements. 

sum3({1, 2, 3}) → 6
sum3({5, 11, 2}) → 18
sum3({7, 0, 0}) → 7

public int sum3(int[] nums)

  int sum = 0;
  for(int n : nums)
    sum += n;
  return sum;

Expected	Run		
sum3({1, 2, 3}) → 6	6	OK	    
sum3({5, 11, 2}) → 18	18	OK	    
sum3({7, 0, 0}) → 7	7	OK	    

6. rotateLeft3 

Given an array of ints length 3, return an array with the elements "rotated left" so {1, 2, 3} yields {2, 3, 1}. 

rotateLeft3({1, 2, 3}) → {2, 3, 1}
rotateLeft3({5, 11, 9}) → {11, 9, 5}
rotateLeft3({7, 0, 0}) → {0, 0, 7}

public int[] rotateLeft3(int[] nums)

  //online compiler doesn't allow static methods
  int temp = nums[0];
  for(int i = 0; i < nums.length-1; i++)
    nums[i] = nums[i+1];
  nums[nums.length-1] = temp;
  return nums;

Expected	Run		
rotateLeft3({1, 2, 3}) → {2, 3, 1}	{2, 3, 1}	OK	    
rotateLeft3({5, 11, 9}) → {11, 9, 5}	{11, 9, 5}	OK	    
rotateLeft3({7, 0, 0}) → {0, 0, 7}	{0, 0, 7}	OK	   

7. reverse3 

Given an array of ints length 3, return a new array with the elements in reverse order, so {1, 2, 3} becomes {3, 2, 1}. 

reverse3({1, 2, 3}) → {3, 2, 1}
reverse3({5, 11, 9}) → {9, 11, 5}
reverse3({7, 0, 0}) → {0, 0, 7}

public int[] reverse3(int[] nums)

  for(int i = 0; i < nums.length/2; i++){
    int temp = nums[i];
    nums[i] = nums[nums.length-1-i];
    nums[nums.length-1-i] = temp;
  }
  return nums;

Expected	Run		
reverse3({1, 2, 3}) → {3, 2, 1}	{3, 2, 1}	OK	    
reverse3({5, 11, 9}) → {9, 11, 5}	{9, 11, 5}	OK	    
reverse3({7, 0, 0}) → {0, 0, 7}	{0, 0, 7}	OK	  

8. maxEnd3

Given an array of ints length 3, figure out which is larger between the first and last elements in the array, and set all the other elements to be that value. Return the changed array. 

maxEnd3({1, 2, 3}) → {3, 3, 3}
maxEnd3({11, 5, 9}) → {11, 11, 11}
maxEnd3({2, 11, 3}) → {3, 3, 3}

public int[] maxEnd3(int[] nums)

  Arrays.fill(nums, Math.max(nums[0], nums[nums.length-1]));
  return nums;

Expected	Run		
maxEnd3({1, 2, 3}) → {3, 3, 3}	{3, 3, 3}	OK	    
maxEnd3({11, 5, 9}) → {11, 11, 11}	{11, 11, 11}	OK	    
maxEnd3({2, 11, 3}) → {3, 3, 3}	{3, 3, 3}	OK	   

9. sum2

Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0. 

sum2({1, 2, 3}) → 3
sum2({1, 1}) → 2
sum2({1, 1, 1, 1}) → 2

public int sum2(int[] nums)

  int sum = 0;
  for(int i = 0; i < Math.min(2, nums.length); i++)
    sum += nums[i];
  return sum;

Expected	Run		
sum2({1, 2, 3}) → 3	3	OK	    
sum2({1, 1}) → 2	2	OK	    
sum2({1, 1, 1, 1}) → 2	2	OK	    
sum2({1, 2}) → 3	3	OK	    
sum2({1}) → 1	1	OK	    
sum2({}) → 0	0	OK	 

10. middleWay 

Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements. 

middleWay({1, 2, 3}, {4, 5, 6}) → {2, 5}
middleWay({7, 7, 7}, {3, 8, 0}) → {7, 8}
middleWay({5, 2, 9}, {1, 4, 5}) → {2, 4}

public int[] middleWay(int[] a, int[] b)

  int[] result = {a[1], b[1]};
  return result;

Expected	Run		
middleWay({1, 2, 3}, {4, 5, 6}) → {2, 5}	{2, 5}	OK	    
middleWay({7, 7, 7}, {3, 8, 0}) → {7, 8}	{7, 8}	OK	    
middleWay({5, 2, 9}, {1, 4, 5}) → {2, 4}	{2, 4}	OK	    

11. makeEnds 

Given an array of ints, return a new array length 2 containing the first and last elements from the original array. The original array will be length 1 or more. 

makeEnds({1, 2, 3}) → {1, 3}
makeEnds({1, 2, 3, 4}) → {1, 4}
makeEnds({7, 4, 6, 2}) → {7, 2}

public int[] makeEnds(int[] nums) 

  int[] result = {nums[0], nums[nums.length-1]};
  return result;

Expected	Run		
makeEnds({1, 2, 3}) → {1, 3}	{1, 3}	OK	    
makeEnds({1, 2, 3, 4}) → {1, 4}	{1, 4}	OK	    
makeEnds({7, 4, 6, 2}) → {7, 2}	{7, 2}	OK

12. has23 

Given an int array length 2, return true if it contains a 2 or a 3. 

has23({2, 5}) → true
has23({4, 3}) → true
has23({4, 5}) → false

public boolean has23(int[] nums)

  for(int n : nums)
    if (n == 2 || n == 3)
      return true;
  return false;

Expected	Run		
has23({2, 5}) → true	true	OK	    
has23({4, 3}) → true	true	OK	    
has23({4, 5}) → false	false	OK	    

13. no23 

Given an int array length 2, return true if it does not contain a 2 or 3. 

no23({4, 5}) → true
no23({4, 2}) → false
no23({3, 5}) → false

public boolean no23(int[] nums)

  for(int n : nums)
    if (n == 2 || n == 3)
      return false;
  return true;

Expected	Run		
no23({4, 5}) → true	true	OK	    
no23({4, 2}) → false	false	OK	    
no23({3, 5}) → false	false	OK	  

14. makeLast

Given an int array, return a new array with double the length where its last element is the same as the original array, and all the other elements are 0. The original array will be length 1 or more. Note: by default, a new int array contains all 0's. 

makeLast({4, 5, 6}) → {0, 0, 0, 0, 0, 6}
makeLast({1, 2}) → {0, 0, 0, 2}
makeLast({3}) → {0, 3}

public int[] makeLast(int[] nums)

  int[] result = new int[2 * nums.length];
  result[result.length-1] = nums[nums.length-1];
  return result;

Expected	Run		
makeLast({4, 5, 6}) → {0, 0, 0, 0, 0, 6}	{0, 0, 0, 0, 0, 6}	OK	    
makeLast({1, 2}) → {0, 0, 0, 2}	{0, 0, 0, 2}	OK	    
makeLast({3}) → {0, 3}	{0, 3}	OK	    
makeLast({0}) → {0, 0}	{0, 0}	OK	  

15. double23 

Given an int array, return true if the array contains 2 twice, or 3 twice. The array will be length 0, 1, or 2. 

double23({2, 2}) → true
double23({3, 3}) → true
double23({2, 3}) → false

public boolean double23(int[] nums)

  boolean has2 = false;
  boolean has3 = false;

  for(int n : nums)
    if ((n == 2 && has2)||(n == 3 && has3))
      return true;
    else if (n == 2)
      has2 = true;
    else if (n == 3)
      has3 = true;

  return false;

Expected	Run		
double23({2, 2}) → true	true	OK	    
double23({3, 3}) → true	true	OK	    
double23({2, 3}) → false	false	OK	    
double23({3, 2}) → false	false	OK	    
double23({4, 5}) → false	false	OK	    
double23({2}) → false	false	OK	    
double23({3}) → false	false	OK	    
double23({}) → false	false	OK	    
double23({3, 4}) → false	false	OK	    

16. fix23 

Given an int array length 3, if there is a 2 in the array immediately followed by a 3, set the 3 element to 0. Return the changed array. 

fix23({1, 2, 3}) → {1, 2, 0}
fix23({2, 3, 5}) → {2, 0, 5}
fix23({1, 2, 1}) → {1, 2, 1}

public int[] fix23(int[] nums)

  for(int i = 1; i < nums.length; i++)
    if (nums[i] == 3 && nums[i-1] == 2)
      nums[i] = 0;
  return nums;

Expected	Run		
fix23({1, 2, 3}) → {1, 2, 0}	{1, 2, 0}	OK	    
fix23({2, 3, 5}) → {2, 0, 5}	{2, 0, 5}	OK	    
fix23({1, 2, 1}) → {1, 2, 1}	{1, 2, 1}	OK	    
fix23({3, 2, 1}) → {3, 2, 1}	{3, 2, 1}	OK	    
fix23({2, 2, 3}) → {2, 2, 0}	{2, 2, 0}	OK	    
fix23({2, 3, 3}) → {2, 0, 3}	{2, 0, 3}	OK	    

17. start1 

  int count = 0;
  if (a.length > 0 && a[0] == 1)
    count++;
  if (b.length > 0 && b[0] == 1)
    count++;
  return count;

Expected	Run		
start1({1, 2, 3}, {1, 3}) → 2	2	OK	    
start1({7, 2, 3}, {1}) → 1	1	OK	    
start1({1, 2}, {}) → 1	1	OK	    
start1({}, {1, 2}) → 1	1	OK	    
start1({7}, {}) → 0	0	OK	    
start1({7}, {1}) → 1	1	OK	    
start1({1}, {1}) → 2	2	OK	    
start1({7}, {8}) → 0	0	OK	    
start1({}, {}) → 0	0	OK	   

18. biggerTwo 

Start with 2 int arrays, a and b, each length 2. Consider the sum of the values in each array. Return the array which has the largest sum. In event of a tie, return a. 

biggerTwo({1, 2}, {3, 4}) → {3, 4}
biggerTwo({3, 4}, {1, 2}) → {3, 4}
biggerTwo({1, 1}, {1, 2}) → {1, 2}

public int[] biggerTwo(int[] a, int[] b)

  if (sumIntArray(a) >= sumIntArray(b))
    return a;
  else
    return b;
}

int sumIntArray(int[] a) {
  int sum = 0;
  for(int n : a)
    sum += n;
  return sum;
}

Expected	Run		
biggerTwo({1, 2}, {3, 4}) → {3, 4}	{3, 4}	OK	    
biggerTwo({3, 4}, {1, 2}) → {3, 4}	{3, 4}	OK	    
biggerTwo({1, 1}, {1, 2}) → {1, 2}	{1, 2}	OK	    
biggerTwo({2, 1}, {1, 1}) → {2, 1}	{2, 1}	OK	    
biggerTwo({2, 2}, {1, 3}) → {2, 2}	{2, 2}	OK	    
biggerTwo({1, 3}, {2, 2}) → {1, 3}	{1, 3}	OK	    
biggerTwo({6, 7}, {3, 1}) → {6, 7}	{6, 7}	OK	    

19. makeMiddle

public int[] makeMiddle(int[] nums) 

  int[] result = new int[2];
  result[0] = nums[nums.length/2 - 1];
  result[1] = nums[nums.length/2];
  return result;

Expected	Run		
makeMiddle({1, 2, 3, 4}) → {2, 3}	{2, 3}	OK	    
makeMiddle({7, 1, 2, 3, 4, 9}) → {2, 3}	{2, 3}	OK	    
makeMiddle({1, 2}) → {1, 2}	{1, 2}	OK	

public int[] makeMiddle(int[] nums)

  int[] result = {nums[nums.length/2 - 1], nums[nums.length/2]};
  return result;

Expected	Run		
makeMiddle({1, 2, 3, 4}) → {2, 3}	{2, 3}	OK	    
makeMiddle({7, 1, 2, 3, 4, 9}) → {2, 3}	{2, 3}	OK	    
makeMiddle({1, 2}) → {1, 2}	{1, 2}	OK	    
makeMiddle({5, 2, 4, 7}) → {2, 4}	{2, 4}	OK	    
makeMiddle({9, 0, 4, 3, 9, 1}) → {4, 3}	{4, 3}	OK	     

20. plusTwo 

Given 2 int arrays, each length 2, return a new array length 4 containing all their elements. 

plusTwo({1, 2}, {3, 4}) → {1, 2, 3, 4}
plusTwo({4, 4}, {2, 2}) → {4, 4, 2, 2}
plusTwo({9, 2}, {3, 4}) → {9, 2, 3, 4}

public int[] plusTwo(int[] a, int[] b) 

  int[] result = new int[a.length + b.length];
  copyArr(b, result, copyArr(a, result, 0));
  return result;
}

int copyArr(int[] source, int[] target, int start){
  int idx = start;
  for (int n : source)
    target[idx++] = n;
    
  return idx;
}

21. swapEnds 

Given an array of ints, swap the first and last elements in the array. Return the modified array. The array length will be at least 1. 

swapEnds({1, 2, 3, 4}) → {4, 2, 3, 1}
swapEnds({1, 2, 3}) → {3, 2, 1}
swapEnds({8, 6, 7, 9, 5}) → {5, 6, 7, 9, 8}

public int[] swapEnds(int[] nums)

  int temp = nums[0];
  nums[0] = nums[nums.length-1];
  nums[nums.length-1] = temp;
  return nums;

Expected	Run		
swapEnds({1, 2, 3, 4}) → {4, 2, 3, 1}	{4, 2, 3, 1}	OK	    
swapEnds({1, 2, 3}) → {3, 2, 1}	{3, 2, 1}	OK	    
swapEnds({8, 6, 7, 9, 5}) → {5, 6, 7, 9, 8}	{5, 6, 7, 9, 8}	OK	    
swapEnds({3, 1, 4, 1, 5, 9}) → {9, 1, 4, 1, 5, 3}	{9, 1, 4, 1, 5, 3}	OK	    
swapEnds({1, 2}) → {2, 1}	{2, 1}	OK	    
swapEnds({1}) → {1}	{1}	OK	    

22. midThree 

Given an array of ints of odd length, return a new array length 3 containing the elements from the middle of the array. The array length will be at least 3. 

midThree({1, 2, 3, 4, 5}) → {2, 3, 4}
midThree({8, 6, 7, 5, 3, 0, 9}) → {7, 5, 3}
midThree({1, 2, 3}) → {1, 2, 3}

public int[] midThree(int[] nums) 

  int[] result = new int[3];
  int pos = nums.length / 2 - 1;
  for(int i = 0; i < result.length; i++)
    result[i] = nums[pos + i];
  return result;

Expected	Run		
midThree({1, 2, 3, 4, 5}) → {2, 3, 4}	{2, 3, 4}	OK	    
midThree({8, 6, 7, 5, 3, 0, 9}) → {7, 5, 3}	{7, 5, 3}	OK	    
midThree({1, 2, 3}) → {1, 2, 3}	{1, 2, 3}	OK	  

23. maxTriple 

Given an array of ints of odd length, look at the first, last, and middle values in the array and return the largest. The array length will be a least 1. 

maxTriple({1, 2, 3}) → 3
maxTriple({1, 5, 3}) → 5
maxTriple({5, 2, 3}) → 5

public int maxTriple(int[] nums)

  return Math.max(nums[0],Math.max(nums[nums.length/2],nums[nums.length-1]));

Expected	Run		
maxTriple({1, 2, 3}) → 3	3	OK	    
maxTriple({1, 5, 3}) → 5	5	OK	    
maxTriple({5, 2, 3}) → 5	5	OK	  

24. frontPiece 

Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present. 

frontPiece({1, 2, 3}) → {1, 2}
frontPiece({1, 2}) → {1, 2}
frontPiece({1}) → {1}

public int[] frontPiece(int[] nums) 

  int[] result = new int[Math.min(2, nums.length)];
  for(int i = 0; i < result.length; i++)
    result[i] = nums[i];
  return result;

Expected	Run		
frontPiece({1, 2, 3}) → {1, 2}	{1, 2}	OK	    
frontPiece({1, 2}) → {1, 2}	{1, 2}	OK	    
frontPiece({1}) → {1}	{1}	OK	    
frontPiece({}) → {}	{}	OK	    

25. unlucky1 

We'll say that a 1 immediately followed by a 3 in an array is an "unlucky" 1. Return true if the given array contains an unlucky 1 in the first 2 or last 2 positions in the array. 

unlucky1({1, 3, 4, 5}) → true
unlucky1({2, 1, 3, 4, 5}) → true
unlucky1({1, 1, 1}) → false

public boolean unlucky1(int[] nums)

  if (is13(nums, 0) || is13(nums, 1) || is13(nums, nums.length-2))
    return true;
  else 
    return false;
}

boolean is13(int[] arr, int pos){
  if (arr.length >= 2 && arr[pos]==1 && arr[pos+1]==3)
    return true;
  else
    return false; 
}

Expected	Run		
unlucky1({1, 3, 4, 5}) → true	true	OK	    
unlucky1({2, 1, 3, 4, 5}) → true	true	OK	    
unlucky1({1, 1, 1}) → false	false	OK	    
unlucky1({1, 3, 1}) → true	true	OK	    
unlucky1({1, 1, 3}) → true	true	OK	    
unlucky1({1, 2, 3}) → false	false	OK	    
unlucky1({3, 3, 3}) → false	false	OK	    
unlucky1({1, 3}) → true	true	OK	    
unlucky1({1, 4}) → false	false	OK	    
unlucky1({1}) → false	false	OK	    
unlucky1({}) → false	false	OK	    

26. make2 

Given 2 int arrays, a and b, return a new array length 2 containing, as much as will fit, the elements from a followed by the elements from b. The arrays may be any length, including 0, but there will be 2 or more elements available between the 2 arrays. 

make2({4, 5}, {1, 2, 3}) → {4, 5}
make2({4}, {1, 2, 3}) → {4, 1}
make2({}, {1, 2}) → {1, 2}

public int[] make2(int[] a, int[] b)

  int[] result = new int[2];
  switch(Math.min(2, a.length)){
    case 0:
      result[0] = b[0]; result[1] = b[1]; break;
    case 1:
      result[0] = a[0]; result[1] = b[0]; break;
    case 2:
      result[0] = a[0]; result[1] = a[1]; break;
  }
  return result;

Expected	Run		
make2({4, 5}, {1, 2, 3}) → {4, 5}	{4, 5}	OK	    
make2({4}, {1, 2, 3}) → {4, 1}	{4, 1}	OK	    
make2({}, {1, 2}) → {1, 2}	{1, 2}	OK	    
make2({1, 2}, {}) → {1, 2}	{1, 2}	OK	    
make2({3}, {1, 2, 3}) → {3, 1}	{3, 1}	OK	    
make2({3}, {1}) → {3, 1}	{3, 1}	OK	    
make2({3, 1, 4}, {}) → {3, 1}	{3, 1}	OK	    
make2({1}, {1}) → {1, 1}	{1, 1}	OK	    
make2({1, 2, 3}, {7, 8}) → {1, 2}	{1, 2}	OK	    

27. front11 

Given 2 int arrays, a and b, of any length, return a new array with the first element of each array. If either array is length 0, ignore that array. 

front11({1, 2, 3}, {7, 9, 8}) → {1, 7}
front11({1}, {2}) → {1, 2}
front11({1, 7}, {}) → {1}

public int[] front11(int[] a, int[] b) 

  int pos = 0;
  int[] result = new int[Math.min(1, a.length) + Math.min(1, b.length)];
  
  if (a.length> 0)
    result[pos++] = a[0];
  if (b.length> 0)
    result[pos] = b[0];
    
  return result;

Expected	Run		
front11({1, 2, 3}, {7, 9, 8}) → {1, 7}	{1, 7}	OK	    
front11({1}, {2}) → {1, 2}	{1, 2}	OK	    
front11({1, 7}, {}) → {1}	{1}	OK	    
front11({}, {2, 8}) → {2}	{2}	OK	    
front11({}, {}) → {}	{}	OK	    
front11({3}, {1, 4, 1, 9}) → {3, 1}	{3, 1}	OK	    
front11({1, 4, 1, 9}, {}) → {1}	{1}	OK	   
