CODING.BAT EXERCISES

Java

Array-2

1. maxSpan 

Consider the leftmost and righmost appearances of some value in an array. We'll say that the "span" is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.) 

maxSpan({1, 2, 1, 1, 3}) → 4
maxSpan({1, 4, 2, 1, 4, 1, 4}) → 6
maxSpan({1, 4, 2, 1, 4, 4, 4}) → 6

public int maxSpan(int[] nums) 

  int max = 0;
  int span = 0;
  
  for(int i = 0; i < nums.length; i++){
    for(int j = nums.length-1; j >= i; j--){
      if (nums[i]==nums[j]){
        span = 1 + j - i;
        break;
       }
     }
     if (span > max)
       max = span;
   }
   return max;

Expected	Run		
maxSpan({1, 2, 1, 1, 3}) → 4	4	OK	    
maxSpan({1, 4, 2, 1, 4, 1, 4}) → 6	6	OK	    
maxSpan({1, 4, 2, 1, 4, 4, 4}) → 6	6	OK	    
maxSpan({3, 3, 3}) → 3	3	OK	    
maxSpan({3, 9, 3}) → 3	3	OK	    
maxSpan({3, 9, 9}) → 2	2	OK	    
maxSpan({3, 9}) → 1	1	OK	    
maxSpan({3, 3}) → 2	2	OK	    
maxSpan({}) → 0	0	OK	    
maxSpan({1}) → 1	1	OK	   

2. fix34 

Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately followed by a 4. Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's, every 3 has a number after it that is not a 3 or 4, and a 3 appears in the array before any 4. 

fix34({1, 3, 1, 4}) → {1, 3, 4, 1}
fix34({1, 3, 1, 4, 4, 3, 1}) → {1, 3, 4, 1, 1, 3, 4}
fix34({3, 2, 2, 4}) → {3, 4, 2, 2}

public int[] fix34(int[] nums)

  for(int i = 0; i < nums.length-1; i++){
    if(nums[i] == 3){
      for(int j = 0; j < nums.length; j++){
        if (nums[j] == 4 && nums[j-1] != 3){
          nums[j] = nums[i+1];
          nums[i+1] = 4;
        }
       }
     }
   }
   return nums;

fix34({1, 3, 1, 4}) → {1, 3, 4, 1}	{1, 3, 4, 1}	OK	    
fix34({1, 3, 1, 4, 4, 3, 1}) → {1, 3, 4, 1, 1, 3, 4}	{1, 3, 4, 1, 1, 3, 4}	OK	    
fix34({3, 2, 2, 4}) → {3, 4, 2, 2}	{3, 4, 2, 2}	OK	    
fix34({3, 2, 3, 2, 4, 4}) → {3, 4, 3, 4, 2, 2}	{3, 4, 3, 4, 2, 2}	OK	    
fix34({2, 3, 2, 3, 2, 4, 4}) → {2, 3, 4, 3, 4, 2, 2}	{2, 3, 4, 3, 4, 2, 2}	OK	    
fix34({3, 1, 4}) → {3, 4, 1}	{3, 4, 1}	OK	    
fix34({3, 4, 1}) → {3, 4, 1}	{3, 4, 1}	OK	    
fix34({1, 1, 1}) → {1, 1, 1}	{1, 1, 1}	OK	    
fix34({1}) → {1}	{1}	OK	    
fix34({}) → {}	{}	OK	    

3. fix45 

Return an array that contains exactly the same numbers as the given array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. 

fix45({5, 4, 9, 4, 9, 5}) → {9, 4, 5, 4, 5, 9}
fix45({1, 4, 1, 5}) → {1, 4, 5, 1}
fix45({1, 4, 1, 5, 5, 4, 1}) → {1, 4, 5, 1, 1, 4, 5}

  for(int i = 0; i < nums.length; i++){
    if(nums[i] == 4){
      for(int j = 0; j < nums.length; j++){
        if (nums[j] == 5 && (j==0 || nums[j-1] != 4)){
          nums[j] = nums[i+1];
          nums[i+1] = 5;
        }
       }
     }
   }
   return nums;

4. canBalance 

Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side. 

canBalance({1, 1, 1, 2, 1}) → true
canBalance({2, 1, 1, 2, 1}) → false
canBalance({10, 10}) → true

public boolean canBalance(int[] nums)

  int pos = 0;
  int left = 0;
  int right = 0;
  
  for(int i = 0; i < nums.length; i++)
    if (i <= pos)
      left += nums[i];
    else
      right += nums[i];
       
   while (pos < nums.length && left < right){
     pos++;
     left += nums[pos];
     right -= nums[pos];
   }
   
   return left == right;

Expected	Run		
canBalance({1, 1, 1, 2, 1}) → true	true	OK	    
canBalance({2, 1, 1, 2, 1}) → false	false	OK	    
canBalance({10, 10}) → true	true	OK	    
canBalance({10, 0, 1, -1, 10}) → true	true	OK	    
canBalance({1, 1, 1, 1, 4}) → true	true	OK	    
canBalance({2, 1, 1, 1, 4}) → false	false	OK	    
canBalance({2, 3, 4, 1, 2}) → false	false	OK	    
canBalance({1, 2, 3, 1, 0, 2, 3}) → true	true	OK	    
canBalance({1, 2, 3, 1, 0, 1, 3}) → false	false	OK	    
canBalance({1}) → false	false	OK	    
canBalance({1, 1, 1, 2, 1}) → true	true	OK	    

5. linearIn 

Given two arrays of ints sorted in increasing order, outer and inner, return true if all of the numbers in inner appear in outer. The best solution makes only a single "linear" pass of both arrays, taking advantage of the fact that both arrays are already in sorted order. 

linearIn({1, 2, 4, 6}, {2, 4}) → true
linearIn({1, 2, 4, 6}, {2, 3, 4}) → false
linearIn({1, 2, 4, 4, 6}, {2, 4}) → true

public boolean linearIn(int[] outer, int[] inner)

  int outPos = 0;
  for(int i = 0; i < inner.length; i++){
    boolean found = false;
    for(int j = outPos; j < outer.length; j++){
      if (inner[i] == outer[j]){
        found = true;
        outPos = j;
      }
    }
    if (!found)
      return false;
  }
  return true;

6. squareUp 

Given n>=0, create an array length n*n with the following pattern, shown here for n=3 : {0, 0, 1,    0, 2, 1,    3, 2, 1} (spaces added to show the 3 groups). 

squareUp(3) → {0, 0, 1, 0, 2, 1, 3, 2, 1}
squareUp(2) → {0, 1, 2, 1}
squareUp(4) → {0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1}

public int[] squareUp(int n)

  int[] result = new int[n*n];
  int num = 1;
  int limit = n;
  
  for(int i = result.length-1; i >= 0; i--){
    result[i] = num++;
    if (num > limit){
      i -= (n - limit);
      limit--;
      num = 1;
    }
  }
  return result;

Expected	Run		
squareUp(3) → {0, 0, 1, 0, 2, 1, 3, 2, 1}	{0, 0, 1, 0, 2, 1, 3, 2, 1}	OK	    
squareUp(2) → {0, 1, 2, 1}	{0, 1, 2, 1}	OK	    
squareUp(4) → {0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1}	{0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1}	OK	    
squareUp(1) → {1}	{1}	OK	    
squareUp(0) → {}	{}	OK	    

7. seriesUp

Given n>=0, create an array with the pattern {1,    1, 2,    1, 2, 3,   ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n*(n + 1)/2. 

seriesUp(3) → {1, 1, 2, 1, 2, 3}
seriesUp(4) → {1, 1, 2, 1, 2, 3, 1, 2, 3, 4}
seriesUp(2) → {1, 1, 2}

public int[] seriesUp(int n)

  int[] result = new int[n*(n + 1)/2];
  int num = 1;
  int limit = 1;
  
  for(int i = 0; i < result.length; i++){
    result[i] = num++;
    if (num > limit){
      limit++;
      num = 1;
    }
  }
  return result; 

Expected	Run		
seriesUp(3) → {1, 1, 2, 1, 2, 3}	{1, 1, 2, 1, 2, 3}	OK	    
seriesUp(4) → {1, 1, 2, 1, 2, 3, 1, 2, 3, 4}	{1, 1, 2, 1, 2, 3, 1, 2, 3, 4}	OK	    
seriesUp(2) → {1, 1, 2}	{1, 1, 2}	OK	    
seriesUp(1) → {1}	{1}	OK	    
seriesUp(0) → {}	{}	OK	   

8. maxMirror

We'll say that a "mirror" section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array. 

maxMirror({1, 2, 3, 8, 9, 3, 2, 1}) → 3
maxMirror({1, 2, 1, 4}) → 3
maxMirror({7, 1, 2, 9, 7, 2, 1}) → 2

public int maxMirror(int[] nums)

  int span = 0;
  int max = 0;
  int left = 0;
  int right = nums.length-1;
  
  if (nums.length < 2)
    return nums.length;

  for(int i = 0; i < nums.length; i++){
  
    for(int j = nums.length-1; j >= 0; j--){
    
      if (nums[i] == nums[j]){
        span = 0;
        left = i;
        right = j;
      }
      
      while (left < nums.length && 
             right >= 0 && 
             nums[left] == nums[right]){
          span++;
          left++;
          right--;
      }
      if (span > max)
        max = span;

    }
  }
  return max;

Expected	Run		
maxMirror({1, 2, 3, 8, 9, 3, 2, 1}) → 3	3	OK	    
maxMirror({1, 2, 1, 4}) → 3	3	OK	    
maxMirror({7, 1, 2, 9, 7, 2, 1}) → 2	2	OK	    
maxMirror({21, 22, 9, 8, 7, 6, 23, 24, 6, 7, 8, 9, 25, 7, 8, 9 }) → 4	4	OK	    
maxMirror({1, 2, 1, 20, 21, 1, 2, 1, 2, 23, 24, 2, 1, 2, 1, 25}) → 4	4	OK	    
maxMirror({1, 2, 3, 2, 1}) → 5	5	OK	    
maxMirror({1, 2, 3, 3, 8}) → 2	2	OK	    
maxMirror({1, 2, 7, 8, 1, 7, 2}) → 2	2	OK	    
maxMirror({1, 1, 1}) → 3	3	OK	    
maxMirror({1}) → 1	1	OK	    
maxMirror({}) → 0	0	OK	    
maxMirror({9, 1, 1, 4, 2, 1, 1, 1}) → 3	3	OK	    
maxMirror({5, 9, 9, 4, 5, 4, 9, 9, 2}) → 7	7	OK	    
maxMirror({5, 9, 9, 6, 5, 4, 9, 9, 2}) → 2	2	OK	    
maxMirror({5, 9, 1, 6, 5, 4, 1, 9, 5}) → 3	3	OK	    

9. countClumps 

Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array. 

countClumps({1, 2, 2, 3, 4, 4}) → 2
countClumps({1, 1, 2, 1, 1}) → 2
countClumps({1, 1, 1, 1, 1}) → 1

public int countClumps(int[] nums) 

  int count = 0;
  boolean clump = false;
  
  for(int i = 1; i < nums.length; i++){
    if (nums[i] == nums[i-1]){
      if (!clump){
        clump = true;
        count++;
      }
    }
    else{
      clump = false;
    }
  }
  return count;

Expected	Run		
countClumps({1, 2, 2, 3, 4, 4}) → 2	2	OK	    
countClumps({1, 1, 2, 1, 1}) → 2	2	OK	    
countClumps({1, 1, 1, 1, 1}) → 1	1	OK	    
countClumps({1, 2, 3}) → 0	0	OK	    
countClumps({2, 2, 1, 1, 1, 2, 1, 1, 2, 2}) → 4	4	OK	    
countClumps({0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2}) → 4	4	OK	    
countClumps({0, 0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2}) → 5	5	OK	    
countClumps({0, 0, 0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2}) → 5	5	OK	    
countClumps({}) → 0	0	OK	  

