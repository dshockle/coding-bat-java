CODING.BAT EXERCISES

Java

Logic-2

1. makeBricks 

We want to make a row of bricks that is goal inches long. We have a number of small bricks (1 inch each) and big bricks (5 inches each). Return true if it is possible to make the goal by choosing from the given bricks. This is a little harder than it looks and can be done without any loops. See also: Introduction to MakeBricks 

makeBricks(3, 1, 8) → true
makeBricks(3, 1, 9) → false
makeBricks(3, 2, 10) → true

public boolean makeBricks(int small, int big, int goal)

  return goal <= 5*big + small && goal % 5 <= small;

Expected	Run		
makeBricks(3, 1, 8) → true	true	OK	    
makeBricks(3, 1, 9) → false	false	OK	    
makeBricks(3, 2, 10) → true	true	OK	    
makeBricks(3, 2, 8) → true	true	OK	    
makeBricks(3, 2, 9) → false	false	OK	    
makeBricks(6, 1, 11) → true	true	OK	    
makeBricks(6, 0, 11) → false	false	OK	    
makeBricks(1, 4, 11) → true	true	OK	    
makeBricks(0, 3, 10) → true	true	OK	    

2. loneSum 

Given 3 int values, a b c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum. 

loneSum(1, 2, 3) → 6
loneSum(3, 2, 3) → 2
loneSum(3, 3, 3) → 0

public int loneSum(int a, int b, int c)

  int sum = 0;
  sum += addIt(a, b, c) + addIt(b, a, c) + addIt(c, a, b);
  return sum;
}

int addIt(int item, int other1, int other2){
  if (item != other1 && item != other2)
    return item;
  else
    return 0;
}

Expected	Run		
loneSum(1, 2, 3) → 6	6	OK	    
loneSum(3, 2, 3) → 2	2	OK	    
loneSum(3, 3, 3) → 0	0	OK	    
loneSum(9, 2, 2) → 9	9	OK	   
loneSum(2, 2, 9) → 9	9	OK	

3. luckySum

Given 3 int values, a b c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count. 

luckySum(1, 2, 3) → 6
luckySum(1, 2, 13) → 3
luckySum(1, 13, 3) → 1

public int luckySum(int a, int b, int c) 

  int sum = 0;
  int[] vals = {a, b, c};
  for (int n : vals)
    if (n == 13)
      return sum;
    else
      sum += n;
  return sum;

Expected	Run		
luckySum(1, 2, 3) → 6	6	OK	    
luckySum(1, 2, 13) → 3	3	OK	    
luckySum(1, 13, 3) → 1	1	OK	    
luckySum(1, 13, 13) → 1	1	OK	    
luckySum(6, 5, 2) → 13	13	OK	    
luckySum(13, 2, 3) → 0	0	OK	   

4. noTeenSum 

Given 3 int values, a b c, return their sum. However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 and 16 do not count as a teens. Write a separate helper "public int fixTeen(int n) {"that takes in an int value and returns that value fixed for the teen rule. In this way, you avoid repeating the teen code 3 times (i.e. "decomposition"). Define the helper below and at the same indent level as the main noTeenSum(). 

noTeenSum(1, 2, 3) → 6
noTeenSum(2, 13, 1) → 3
noTeenSum(2, 1, 14) → 3

public int noTeenSum(int a, int b, int c)

  return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n){
  if ((n >= 13 && n <= 14) || (n >= 17 && n <= 19))
    return 0;
  else
    return n;
}

Expected	Run		
noTeenSum(1, 2, 3) → 6	6	OK	    
noTeenSum(2, 13, 1) → 3	3	OK	    
noTeenSum(2, 1, 14) → 3	3	OK	    
noTeenSum(2, 1, 15) → 18	18	OK	    
noTeenSum(2, 1, 16) → 19	19	OK	    
noTeenSum(2, 1, 17) → 3	3	OK	    
noTeenSum(17, 1, 2) → 3	3	OK	    
noTeenSum(2, 15, 2) → 19	19	OK	    
noTeenSum(16, 17, 18) → 16	16	OK	    
noTeenSum(17, 18, 19) → 0	0	OK	    

5. roundSum 

For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values. To avoid code repetition, write a separate helper "public int round10(int num) {" and call it 3 times. Write the helper entirely below and at the same indent level as roundSum(). 

roundSum(16, 17, 18) → 60
roundSum(12, 13, 14) → 30
roundSum(6, 4, 4) → 10

public int roundSum(int a, int b, int c)

  return r10(a) + r10(b) + r10(c);  
}

public int r10(int n) {
  if (n % 10 < 5)
    return 10 * (n / 10);
  else
    return 10 * ((n / 10) + 1);
}

Expected	Run		
roundSum(16, 17, 18) → 60	60	OK	    
roundSum(12, 13, 14) → 30	30	OK	    
roundSum(6, 4, 4) → 10	10	OK	    
roundSum(4, 6, 5) → 20	20	OK	    
roundSum(4, 4, 6) → 10	10	OK	    
roundSum(9, 4, 4) → 10	10	OK	    
roundSum(0, 0, 1) → 0	0	OK	    
roundSum(0, 9, 0) → 10	10	OK	    
roundSum(10, 10, 19) → 40	40	OK	    
roundSum(20, 30, 40) → 90	90	OK	    
roundSum(45, 21, 30) → 100	100	OK	  

6. closeFar 

Given three ints, a b c, return true if one of b or c is "close" (differing from a by at most 1), while the other is "far", differing from both other values by 2 or more. 

closeFar(1, 2, 10) → true
closeFar(1, 2, 3) → false
closeFar(4, 1, 3) → true

public boolean closeFar(int a, int b, int c)

  if (near(a,b) && far(a,c) && far(b,c))
    return true;
  else if (near(a,c) && far(a,b) && far(b,c))
    return true;
  else 
    return false;
}

boolean near(int x, int y){
  return Math.abs(x-y) <= 2;
}

boolean far(int x, int y){
  return Math.abs(x-y) >= 2;
}

Expected	Run		
closeFar(1, 2, 10) → true	true	OK	    
closeFar(1, 2, 3) → false	false	OK	    
closeFar(4, 1, 3) → true	true	OK	    
closeFar(4, 5, 3) → false	false	OK	    
closeFar(4, 3, 5) → false	false	OK	    
closeFar(-1, 10, 0) → true	true	OK	    
closeFar(0, -1, 10) → true	true	OK	    
closeFar(10, 10, 8) → true	true	OK	    
closeFar(10, 8, 9) → false	false	OK	    

7. blackjack 

  return Math.max(near21(a), near21(b));
}
int near21(int n) {
  if (n > 21 || n < 1)
    return 0;
  else
    return n;
}

Expected	Run		
blackjack(19, 21) → 21	21	OK	    
blackjack(21, 19) → 21	21	OK	    
blackjack(19, 22) → 19	19	OK	    
blackjack(22, 19) → 19	19	OK	    
blackjack(22, 50) → 0	0	OK	    
blackjack(22, 22) → 0	0	OK	    
blackjack(33, 1) → 1	1	OK	    
blackjack(1, 2) → 2	2	OK	    

8. evenlySpaced 

Given three ints, a b c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large. 

evenlySpaced(2, 4, 6) → true
evenlySpaced(4, 6, 2) → true
evenlySpaced(4, 6, 3) → false

  int min = Math.min(a, Math.min(b,c));
  int max = Math.max(a, Math.max(b,c));
  int mid = a + b + c - min - max;
  return max - mid == mid - min;

Expected	Run		
evenlySpaced(2, 4, 6) → true	true	OK	    
evenlySpaced(4, 6, 2) → true	true	OK	    
evenlySpaced(4, 6, 3) → false	false	OK	    
evenlySpaced(6, 2, 4) → true	true	OK	    
evenlySpaced(6, 2, 8) → false	false	OK	    
evenlySpaced(2, 2, 2) → true	true	OK	    
evenlySpaced(2, 2, 3) → false	false	OK	    

9. makeChocolate 

We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done. 

makeChocolate(4, 1, 9) → 4
makeChocolate(4, 1, 10) → -1
makeChocolate(4, 1, 7) → 2

public int makeChocolate(int small, int big, int goal)

  int b = Math.min(big, goal/5);
  int s = goal - 5*b;
  if (s > small)
    return -1;
  else
    return s;

Expected	Run		
makeChocolate(4, 1, 9) → 4	4	OK	    
makeChocolate(4, 1, 10) → -1	-1	OK	    
makeChocolate(4, 1, 7) → 2	2	OK	    
makeChocolate(6, 2, 7) → 2	2	OK	    
makeChocolate(4, 1, 5) → 0	0	OK	    
makeChocolate(4, 1, 4) → 4	4	OK	    
makeChocolate(5, 4, 9) → 4	4	OK	    
makeChocolate(9, 3, 18) → 3	3	OK	    
makeChocolate(3, 1, 9) → -1	-1	OK	    
makeChocolate(1, 2, 7) → -1	-1	OK	    
makeChocolate(1, 2, 6) → 1	1	OK	    
makeChocolate(1, 2, 5) → 0	0	OK	  

